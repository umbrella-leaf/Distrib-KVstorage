syntax = "proto3";

package raftRpcProctoc; 

option cc_generic_services = true;

// 日志实体
message LogEntry {
    bytes Command = 1;
    int32 LogTerm = 2;
    int32 LogIndex = 3;
}

// 心跳/日志复制调用的请求参数
message AppendEntriesArgs {
    int32 Term = 1;
    int32 LeaderId = 2;
    int32 PrevLogIndex = 3;
    int32 PrevLogTerm = 4;
    repeated LogEntry Entries = 5;
    int32 LeaderCommit = 6;
}

// 心跳/日志复制调用的响应参数
message AppendEntriesReply {
    int32 Term = 1; // leader的任期可能和follower不同
    bool Success = 2; 
    int32 UpdateNextIndex = 3; // 快速调整leader对应的nextIndex
    int32 AppState = 4; // 用来标识节点网路状态
}

// 请求投票调用的请求参数
message RequestVoteArgs {
    int32 Term = 1;
    int32 CandidateId = 2;
    int32 LastLogIndex = 3;
    int32 LastLogTerm = 4;
}

// 请求投票调用的响应参数
message RequestVoteReply {
    int32 Term = 1;
    bool VoteGranted = 2;
    int32 VoteState = 3;
}

// 安装快照调用的请求参数
message InstallSnapshotRequest {
    int32 LeaderId = 1;
    int32 Term = 2;
    int32 LastSnapShotIncludeIndex = 3;
    int32 LastSnapShotIncludeTerm = 4;
    bytes Data = 5; // 快照信息，实际是数据库的数据快照，不是日志！
}

// 安装快照调用的响应参数，只包含Term，因为快照只要Term满足就无条件接受
message InstallSnapShotResponse {
    int32 Term = 1;
}

// raft节点之间的rpc通信服务
service raftRpc {
    rpc AppendEntries(AppendEntriesArgs) returns(AppendEntriesReply);
    rpc InstallSnapShot (InstallSnapshotRequest) returns (InstallSnapShotResponse);
    rpc RequestVote (RequestVoteArgs) returns (RequestVoteReply);
}
